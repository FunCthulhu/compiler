program ::= (PROGRAM ID SEMI)? block DOT

block ::= declarations compound_statement

declarations ::= (var_declaration_part | const_declaration_part | procedure_declaration_part)*

var_declaration_part ::= VAR var_declaration (SEMI var_declaration)* SEMI?
var_declaration ::= ID (COMMA ID)* COLON type_spec

const_declaration_part ::= CONST const_declaration (SEMI const_declaration)* SEMI?
const_declaration ::= ID EQUAL constant

procedure_declaration_part ::= PROCEDURE ID (LPAREN formal_parameter_list RPAREN)? SEMI block SEMI
formal_parameter_list ::= formal_parameters (SEMI formal_parameters)*
formal_parameters ::= ID (COMMA ID)* COLON type_spec

type_spec ::= INTEGER | REAL

compound_statement ::= BEGIN statement_list END

statement_list ::= statement (SEMI statement)* | empty

statement ::= compound_statement
            | assignment_statement
            | procedure_call_statement
            | if_statement
            | while_statement
            | read_statement
            | write_statement
            | empty

assignment_statement ::= variable ASSIGN expression
procedure_call_statement ::= ID (LPAREN (expression (COMMA expression)*)? RPAREN)?

if_statement ::= IF expression THEN statement (ELSE statement)?
while_statement ::= WHILE expression DO statement
read_statement ::= READ LPAREN variable (COMMA variable)* RPAREN
write_statement ::= WRITE LPAREN expression (COMMA expression)* RPAREN

expression        ::= logical_or_term (OR logical_or_term)*
logical_or_term   ::= logical_and_term (AND logical_and_term)*
logical_and_term  ::= comparison_expr
comparison_expr   ::= arithmetic_expr ((EQUAL | NOT_EQUAL | LESS_THAN | LESS_EQUAL | GREATER_THAN | GREATER_EQUAL) arithmetic_expr)?
arithmetic_expr   ::= term ((PLUS | MINUS) term)*
term              ::= factor ((MUL | REAL_DIV | INTEGER_DIV) factor)*
factor            ::= (PLUS | MINUS | NOT)? primary
primary           ::= INTEGER_CONST
                    | REAL_CONST
                    | STRING_LITERAL
                    | variable
                    | LPAREN expression RPAREN

variable ::= ID
constant ::= INTEGER_CONST | REAL_CONST
empty ::=